       	     +-------------------------+
             | CSCC69                  |
             | PROJECT 4: FILE SYSTEMS |
             | DESIGN DOCUMENT         |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Louis Ren <louis.ren@mail.utoronto.co>
Lucas Ilea <email@domain.example>
Nathaneal Robbins <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://en.wikipedia.org/wiki/Inode_pointer_structure
https://elixir.bootlin.com/linux/v4.7/source/fs/ext2/ext2.h#L220

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

Our on-disk inode has 123 direct blocks, one indirect block, and one doubly-indirect block.
Each block references a sector of size 512 bytes.
Therefore the maximum file size is 123*512 + 128*512 + 128^2*512 = 8517120 bytes ~ 8.5 megabytes.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
We hold a grow_lock in our struct inode which is acquired during inode_grow. This lock is placed 
before the length check where we calculate how much we need to grow. If two processes try to grow 
at the same time, whichever acquires the lock first will grow to its desired length then the latter 
process will check if it still needs to be grown more - if it does, it will grow however much is necessary,
if not, the function will exit. 

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes, our inode structure is a multilevel index. We chose a combination of direct, indirect, and doubly indirect blocks such that we could support a file size of over 8Mb, which was a project requirement.
Specifically, we used as many direct blocks as could fit in the 512 bytes allocated to an inode on disk, as the physical sector size is also 512 bytes so the space will be allocated on disk regardless.
This increases efficiency as we've maximized how large a file can be before we need to allocate additional blocks, which is especially useful since the majority of files on disk are small files. We
went with one indirect and one doubly indirect block because that was enough to reach the required minimum file size, as described in A2.

                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Our code for traversing a user-specified path is implemented in dir_path_lookup. First, we determine if the path is absolute or relative, indicated by the presence or absence of a leading '/'.
If absolute, we set the current directory as the root directory. If relative, we use the current thread's working directory.

Next, if the path doesn't contain a slash at all, it's only a directory name, and we simply look for it in the current directory, returning it, or NULL if not found.

Otherwise, we must traverse the directory tree to find the specified directory. Using strtok, we parse the path, find each directory name in the current directory, and update the current directory
to be the directory we just found. This is repeated until we have gone through the entire path, and we return the final directory, or NULL if at any point a directory wasn't found.

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

To prevent races on directory entires, we acquire a lock on the parent directory in functions like dir_make and dir_remove. If there are two simultaneous attempts to create or remove the same file
in a directory, the second attempt will try and acquire the lock, forcing it to wait for the first one to finish. Then, the second attempt checks that the file hasn't already been created or deleted,
and since in this example it has, no changes are made, and the lock is released at the end. The Project 4 handout specifies that "operations on the same directory may wait for one another", and since
operations like create or remove modify the dir struct both in memory and on disk, it's important to synchronize access to these.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

No, our implementation does not allow a directory to be removed if a process has opened it, or if it's set as a process's current working directory. We prevent this by making use of the dir_remove
function to delete directories. When a directory is set as a process's current directory, it is opened. Then, dir_remove verifies that the open count of the directory to remove is no greater than 1,
and won't remove it if it is currently open in another process.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We chose to represent the current directory of a processes as a struct dir, as opposed to other representations like a path string, as it allows for easy use in other functions, such as dir_path_lookup
and dir_close without additional repeated parsing.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
